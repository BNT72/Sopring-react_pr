{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\valzhanov\\\\Desktop\\\\test\\\\Spring-backend\\\\src\\\\main\\\\resources\\\\react-frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Container } from \"react-bootstrap\";\nimport ListIssueComponent from \"./components/ListIssueComponent\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CreateIssueComponent from \"./components/CreateIssueComponent\";\nimport ViewIssueComponent from \"./components/ViewIssueComponent\";\nimport { GetUser } from \"./redux/actions\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Login() {\n  _s();\n\n  const dispatch = useDispatch();\n  dispatch(GetUser());\n  const user = useSelector(state => {\n    return state.users.user;\n  });\n  return user;\n}\n\n_s(Login, \"ERMOJPz2/CN1rNPFhRsLNXBEzzQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Login;\n\nfunction App() {\n  let user = Login();\n  console.log(user);\n\n  if (!user.id) {\n    // Супер костыль //\n    // Авторизация проходит только на порту 8081, если пользователь не авторизован появляеться ссылка на порт спринга\n    //  где проходит авторизация и в дальнейшем редиректит обратно на порт 3000\n    return /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"http://localhost:8081/back\",\n      children: \" Hello user! You need to log in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 18\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"mt-3\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            exact: true,\n            component: ListIssueComponent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/employees\",\n            component: ListIssueComponent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/add-employee/:id\",\n            component: CreateIssueComponent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/view-employee/:id\",\n            component: ViewIssueComponent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Login\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/valzhanov/Desktop/test/Spring-backend/src/main/resources/react-frontend/src/App.js"],"names":["BrowserRouter","Router","Route","Switch","Container","ListIssueComponent","useDispatch","useSelector","CreateIssueComponent","ViewIssueComponent","GetUser","React","Login","dispatch","user","state","users","App","console","log","id"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAAQA,aAAa,IAAIC,MAAzB,EAAiCC,KAAjC,EAAwCC,MAAxC,QAAqD,kBAArD;AACA,SAAQC,SAAR,QAAwB,iBAAxB;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,oBAAP,MAAiC,mCAAjC;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,SAAQC,OAAR,QAAsB,iBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACb,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACAO,EAAAA,QAAQ,CAACH,OAAO,EAAR,CAAR;AACA,QAAMI,IAAI,GAAGP,WAAW,CAACQ,KAAK,IAAI;AAC9B,WAAOA,KAAK,CAACC,KAAN,CAAYF,IAAnB;AACH,GAFuB,CAAxB;AAIA,SAAOA,IAAP;AACH;;GARQF,K;UACYN,W,EAEJC,W;;;KAHRK,K;;AAUT,SAASK,GAAT,GAAe;AAER,MAAIH,IAAI,GAAEF,KAAK,EAAf;AAIHM,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;;AAEA,MAAG,CAACA,IAAI,CAACM,EAAT,EACA;AACI;AACA;AACA;AACA,wBAAS;AAAG,MAAA,IAAI,EAAE,4BAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AACH;;AAGG,sBACI;AAAA,2BACI,QAAC,MAAD;AAAA,6BAGI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAE,MAAtB;AAAA,+BACI,QAAC,MAAD;AAAA,kCACI,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,GAAZ;AAAgB,YAAA,KAAK,MAArB;AAAsB,YAAA,SAAS,EAAEf;AAAjC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,YAAZ;AAAyB,YAAA,SAAS,EAAEA;AAApC;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,mBAAZ;AAAgC,YAAA,SAAS,EAAEG;AAA3C;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,oBAAZ;AAAiC,YAAA,SAAS,EAAEC;AAA5C;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAmBP;;MApCQQ,G;AAsCT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport {Container} from \"react-bootstrap\";\nimport ListIssueComponent from \"./components/ListIssueComponent\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport CreateIssueComponent from \"./components/CreateIssueComponent\";\nimport ViewIssueComponent from \"./components/ViewIssueComponent\";\nimport {GetUser} from \"./redux/actions\";\nimport React from \"react\";\n\nfunction Login (){\n    const dispatch = useDispatch()\n    dispatch(GetUser());\n    const user = useSelector(state => {\n        return state.users.user\n    })\n\n    return user\n}\n\nfunction App() {\n\n       let user= Login();\n\n\n\n    console.log(user)\n\n    if(!user.id)\n    {\n        // Супер костыль //\n        // Авторизация проходит только на порту 8081, если пользователь не авторизован появляеться ссылка на порт спринга\n        //  где проходит авторизация и в дальнейшем редиректит обратно на порт 3000\n        return  (<a href={\"http://localhost:8081/back\"}> Hello user! You need to log in</a>)\n    }\n\n\n        return (\n            <>\n                <Router>\n\n\n                    <Container className={\"mt-3\"}>\n                        <Switch>\n                            <Route path=\"/\" exact component={ListIssueComponent}/>\n                            <Route path=\"/employees\" component={ListIssueComponent}/>\n                            <Route path=\"/add-employee/:id\" component={CreateIssueComponent}/>\n                            <Route path=\"/view-employee/:id\" component={ViewIssueComponent}/>\n                        </Switch>\n                    </Container>\n\n\n                </Router>\n            </>\n        );\n   \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}