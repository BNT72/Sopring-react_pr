{"ast":null,"code":"import { DELETE, GET_ALL, POST } from \"./types\";\nconst initialState = {\n  employees: []\n};\nexport const postsReducer = (state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (action.type) {\n    // case POST:\n    //     return {...state,posts: state.posts.concat([action.payload])}\n    case GET_ALL:\n      return { ...state,\n        employees: action.payload\n      };\n\n    case DELETE:\n      return state.filter(id => id !== action.payload.id);\n\n    case UPDATE:\n      return employees.map(tutorial => {\n        if (tutorial.id === payload.id) {\n          return { ...tutorial,\n            ...payload\n          };\n        } else {\n          return tutorial;\n        }\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/valzhanov/Desktop/test/react-frontend/src/redux/postsReducer.js"],"names":["DELETE","GET_ALL","POST","initialState","employees","postsReducer","state","action","type","payload","filter","id","UPDATE","map","tutorial"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,OAAhB,EAAyBC,IAAzB,QAAoC,SAApC;AAEA,MAAMC,YAAY,GAAC;AAEfC,EAAAA,SAAS,EAAC;AAFK,CAAnB;AAIA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAEH,YAAR,EAAsBI,MAAtB,KAAiC;AACzD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQA,MAAM,CAACC,IAAf;AACI;AACA;AAEA,SAAKP,OAAL;AACI,aAAO,EAAC,GAAGK,KAAJ;AAAUF,QAAAA,SAAS,EAAEG,MAAM,CAACE;AAA5B,OAAP;;AAEJ,SAAKT,MAAL;AACI,aAAOM,KAAK,CAACI,MAAN,CAAcC,EAAD,IAAMA,EAAE,KAAKJ,MAAM,CAACE,OAAP,CAAeE,EAAzC,CAAP;;AAGA,SAAKC,MAAL;AACI,aAAOR,SAAS,CAACS,GAAV,CAAeC,QAAD,IAAc;AAC/B,YAAIA,QAAQ,CAACH,EAAT,KAAgBF,OAAO,CAACE,EAA5B,EAAgC;AAC5B,iBAAO,EACH,GAAGG,QADA;AAEH,eAAGL;AAFA,WAAP;AAIH,SALD,MAKO;AACH,iBAAOK,QAAP;AACH;AACJ,OATM,CAAP;;AAUR;AAAQ,aAAOR,KAAP;AAtBZ;AAwBH,CA3BM","sourcesContent":["import {DELETE, GET_ALL, POST} from \"./types\";\r\n\r\nconst initialState={\r\n\r\n    employees:[]\r\n}\r\nexport const postsReducer = (state= initialState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (action.type){\r\n        // case POST:\r\n        //     return {...state,posts: state.posts.concat([action.payload])}\r\n\r\n        case GET_ALL:\r\n            return {...state,employees: action.payload}\r\n\r\n        case DELETE:\r\n            return state.filter((id)=>id !== action.payload.id);\r\n\r\n\r\n            case UPDATE :\r\n                return employees.map((tutorial) => {\r\n                    if (tutorial.id === payload.id) {\r\n                        return {\r\n                            ...tutorial,\r\n                            ...payload,\r\n                        };\r\n                    } else {\r\n                        return tutorial;\r\n                    }\r\n                });\r\n        default:return state\r\n    }\r\n};\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}