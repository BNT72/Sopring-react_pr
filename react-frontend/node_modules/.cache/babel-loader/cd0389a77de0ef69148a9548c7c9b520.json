{"ast":null,"code":"import { DELETE, GET_ALL, POST, UPDATE } from \"./types\";\nconst initialState = {\n  employees: []\n};\nexport const postsReducer = (employees = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (action.type) {\n    // case POST:\n    //     return {...state,posts: state.posts.concat([action.payload])}\n    case GET_ALL:\n      return { ...employees,\n        employees: payload\n      };\n\n    case DELETE:\n      return { ...employees,\n        employees: employees.employees.filter(({\n          id\n        }) => id !== payload.id)\n      };\n\n    case UPDATE:\n      return employees.map(employee => {\n        if (employees.id === payload.id) {\n          return { ...employee,\n            ...payload\n          };\n        } else {\n          return employee;\n        }\n      });\n\n    default:\n      return employees;\n  }\n};","map":{"version":3,"sources":["C:/Users/valzhanov/Desktop/test/react-frontend/src/redux/postsReducer.js"],"names":["DELETE","GET_ALL","POST","UPDATE","initialState","employees","postsReducer","action","type","payload","filter","id","map","employee"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,OAAhB,EAAyBC,IAAzB,EAA+BC,MAA/B,QAA4C,SAA5C;AAEA,MAAMC,YAAY,GAAC;AAEfC,EAAAA,SAAS,EAAC;AAFK,CAAnB;AAIA,OAAO,MAAMC,YAAY,GAAG,CAACD,SAAS,GAAED,YAAZ,EAA0BG,MAA1B,KAAqC;AAC7D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQA,MAAM,CAACC,IAAf;AACI;AACA;AAEA,SAAKP,OAAL;AACI,aAAO,EAAC,GAAGI,SAAJ;AAAcA,QAAAA,SAAS,EAAEI;AAAzB,OAAP;;AAEJ,SAAKT,MAAL;AACI,aAAO,EAAC,GAAGK,SAAJ;AAAcA,QAAAA,SAAS,EAACA,SAAS,CAACA,SAAV,CAAoBK,MAApB,CAA2B,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAYA,EAAE,KAAKF,OAAO,CAACE,EAAtD;AAAxB,OAAP;;AAIA,SAAKR,MAAL;AACI,aAAOE,SAAS,CAACO,GAAV,CAAeC,QAAD,IAAc;AAC/B,YAAIR,SAAS,CAACM,EAAV,KAAiBF,OAAO,CAACE,EAA7B,EAAiC;AAC7B,iBAAO,EACH,GAAGE,QADA;AAEH,eAAGJ;AAFA,WAAP;AAIH,SALD,MAKO;AACH,iBAAOI,QAAP;AACH;AACJ,OATM,CAAP;;AAUR;AAAQ,aAAOR,SAAP;AAvBZ;AAyBH,CA5BM","sourcesContent":["import {DELETE, GET_ALL, POST, UPDATE} from \"./types\";\r\n\r\nconst initialState={\r\n\r\n    employees:[]\r\n}\r\nexport const postsReducer = (employees= initialState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (action.type){\r\n        // case POST:\r\n        //     return {...state,posts: state.posts.concat([action.payload])}\r\n\r\n        case GET_ALL:\r\n            return {...employees,employees: payload}\r\n\r\n        case DELETE:\r\n            return {...employees,employees:employees.employees.filter(({ id }) => id !== payload.id)};\r\n\r\n\r\n\r\n            case UPDATE :\r\n                return employees.map((employee) => {\r\n                    if (employees.id === payload.id) {\r\n                        return {\r\n                            ...employee,\r\n                            ...payload,\r\n                        };\r\n                    } else {\r\n                        return employee;\r\n                    }\r\n                });\r\n        default:return employees\r\n    }\r\n};\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}