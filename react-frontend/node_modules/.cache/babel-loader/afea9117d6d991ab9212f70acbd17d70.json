{"ast":null,"code":"import { DELETE, GET_ALL, POST, UPDATE } from \"./types\";\nconst initialState = {\n  employees: []\n};\nexport const postsReducer = (state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (action.type) {\n    // case POST:\n    //     return {...state,posts: state.posts.concat([action.payload])}\n    case GET_ALL:\n      return { ...state,\n        employees: payload\n      };\n\n    case DELETE:\n      return { ...state,\n        employees: state.employees.filter(({\n          id\n        }) => id !== payload)\n      };\n\n    case UPDATE:\n      //return {...state,employees: state.employees.map((post))}\n      return state.employees.map(employee => {\n        if (employee.id === action.id) {\n          return { ...employee\n          };\n        } else return employee;\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/valzhanov/Desktop/test/react-frontend/src/redux/postsReducer.js"],"names":["DELETE","GET_ALL","POST","UPDATE","initialState","employees","postsReducer","state","action","type","payload","filter","id","map","employee"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,OAAhB,EAAyBC,IAAzB,EAA+BC,MAA/B,QAA4C,SAA5C;AAEA,MAAMC,YAAY,GAAC;AAEfC,EAAAA,SAAS,EAAC;AAFK,CAAnB;AAIA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAEH,YAAR,EAAsBI,MAAtB,KAAiC;AACzD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQA,MAAM,CAACC,IAAf;AACI;AACA;AAEA,SAAKR,OAAL;AACI,aAAO,EAAC,GAAGM,KAAJ;AAAUF,QAAAA,SAAS,EAAEK;AAArB,OAAP;;AAEJ,SAAKV,MAAL;AACI,aAAO,EAAC,GAAGO,KAAJ;AAAUF,QAAAA,SAAS,EAACE,KAAK,CAACF,SAAN,CAAgBM,MAAhB,CAAuB,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAYA,EAAE,KAAKF,OAA1C;AAApB,OAAP;;AAGJ,SAAKP,MAAL;AACQ;AACA,aAAOI,KAAK,CAACF,SAAN,CAAgBQ,GAAhB,CAAqBC,QAAD,IAAY;AACnC,YAAGA,QAAQ,CAACF,EAAT,KAAgBJ,MAAM,CAACI,EAA1B,EAA8B;AAC1B,iBAAO,EACH,GAAGE;AADA,WAAP;AAIH,SALD,MAKO,OAAOA,QAAP;AACV,OAPM,CAAP;;AAQR;AAAQ,aAAOP,KAAP;AArBZ;AAuBH,CA1BM","sourcesContent":["import {DELETE, GET_ALL, POST, UPDATE} from \"./types\";\r\n\r\nconst initialState={\r\n\r\n    employees:[]\r\n}\r\nexport const postsReducer = (state= initialState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (action.type){\r\n        // case POST:\r\n        //     return {...state,posts: state.posts.concat([action.payload])}\r\n\r\n        case GET_ALL:\r\n            return {...state,employees: payload}\r\n\r\n        case DELETE:\r\n            return {...state,employees:state.employees.filter(({ id }) => id !== payload)};\r\n\r\n\r\n        case UPDATE :\r\n                //return {...state,employees: state.employees.map((post))}\r\n                return state.employees.map((employee)=>{\r\n                    if(employee.id === action.id) {\r\n                        return {\r\n                            ...employee,\r\n\r\n                        }\r\n                    } else return employee;\r\n                })\r\n        default:return state\r\n    }\r\n};\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}